import copy
q = []
visited = []

def compare(s,g):
    if s==g:
        return(1)
    else:
        return(0)

def find_pos(s):    
    for i in range(3):
        for j in range(3):
            if s[i][j] == 0:
                return([i,j])

def up(s,pos):    
    if pos[0] > 0:
        temp = copy.deepcopy(s)
        temp[pos[0]][pos[1]],temp[pos[0]-1][pos[1]-1]=temp[pos[0]-1][pos[1]],temp[pos[0]][pos[1]]
        return (temp)
    else:
        return (s)
    
def down(s,pos):
    if pos[0] < 2:
        temp = copy.deepcopy(s)
        temp[pos[0]][pos[1]],temp[pos[0]+1][pos[1]]=temp[pos[0]+1][pos[1]],temp[pos[0]][pos[1]]
        return (temp)
    else:
        return (s)

def right(s,pos):    
    if pos[1] < 2:
        temp = copy.deepcopy(s)
        temp[pos[0]][pos[1]],temp[pos[0]][pos[1]+1]=temp[pos[0]][pos[1]+1],temp[pos[0]][pos[1]]
        return (temp)
    else:
        return (s)

def left(s,pos):
    if pos[1] > 0:
        temp = copy.deepcopy(s)
        temp[pos[0]][pos[1]],temp[pos[0]][pos[1]-1]=temp[pos[0]][pos[1]-1],temp[pos[0]][pos[1]]
        return (temp)
    else:
        return (s)
    
def enqueue(s,val):
    global q
    q = q + [(val,s)]

def heuristic(s,g):
    d = 0
    for i in range(3):
        for j in range(3):
            if s[i][j] != g[i][j] and s[i][j]!=0:
                d += 1
    return d
                
def dequeue():    
    global q
    global visited
    q.sort()
    visited = visited + [q[0][1]]
    elem = q[0][1]
    del q[0]
    return (elem)
    
def search(s,g):    
    curr_state = copy.deepcopy(s)
    if s == g:
        return
    global visited
    while(1):
        pos = find_pos(curr_state)
        new = up(curr_state,pos)
        if new != curr_state:
            if new == g:
                print ("found!! The intermediate states are:")
                print (visited + [g])
                return
            else:
                if new not in visited:
                    enqueue(new,heuristic(new,g))
        new = down(curr_state,pos)
        if new != curr_state:
            if new == g:
                print ("found!! The intermediate states are:")
                print (visited + [g])
                return
            else:
                if new not in visited:
                    enqueue(new,heuristic(new,g))
        new = right(curr_state,pos)
        if new != curr_state:
            if new == g:
                print ("found!! The intermediate states are:")
                print (visited + [g])
                return
            else:
                if new not in visited:
                    enqueue(new,heuristic(new,g))
        new = left(curr_state,pos)
        if new != curr_state:
            if new == g:
                print ("found!! The intermediate states are:")
                print (visited + [g])
                return
            else:
                if new not in visited:
                    enqueue(new,heuristic(new,g))
        if len(q) > 0:
            curr_state = dequeue()
        else:
            print ("not found")
            return
        
s = [[2,0,3],[1,8,4],[7,6,5]]
g = [[1,2,3],[8,0,4],[7,6,5]]
search(s,g)
